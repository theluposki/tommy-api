{"version":3,"sources":["../src/app.ts","../src/config.ts","../src/routes/infoRouter.ts","../src/routes/UserRouter.ts","../src/db/mariadb.ts","../src/db/createTables.ts","../src/domain/entities/User/useCases/CreateUser.ts","../src/utils/hashPassword.ts","../src/domain/entities/User/User.ts","../src/repositories/User/createUserRepository.ts","../src/repositories/User/UserRepository.ts","../src/controllers/User/CreateUserController.ts","../src/controllers/User/UserController.ts","../src/routes/index.ts"],"sourcesContent":["import express, { Express } from 'express'\nimport cors from 'cors'\nimport config from './config.js'\nimport cookieParser from 'cookie-parser';\nimport routes from './routes/index.ts'\n\nconst app:Express = express()\n\napp.use(cors(config.cors))\napp.use(cookieParser());\napp.use(express.json())\napp.use('/', express.static('src/public'))\n\nroutes(app)\n\nexport default app\n","import dotenv from \"dotenv\";\nimport { readFileSync } from \"fs\";\nimport { PoolConfig } from \"mariadb\";\n\ndotenv.config();\n\ninterface Certificates {\n  key: Buffer;\n  cert: Buffer;\n}\n\ninterface App {\n  PORT: string | number;\n  HOST?: string;\n  baseUrl?: string;\n}\n\ninterface Cors {\n  origin: string;\n  credentials: boolean;\n}\n\nconst mariadbConfig: PoolConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE,\n  port: Number(process.env.DB_PORT),\n  connectionLimit: 5,\n};\n\ninterface Config {\n  certificates: Certificates;\n  app: App;\n  cors: Cors;\n  mariadb: PoolConfig;\n}\n\nconst config: Config = {\n  certificates: {\n    key: readFileSync(\"./server.key\"),\n    cert: readFileSync(\"./server.crt\"),\n  },\n  app: {\n    PORT: process.env.PORT ?? 3002,\n    HOST: process.env.HOST,\n    baseUrl: process.env.BASE_URL,\n  },\n  cors: {\n    origin: \"https://localhost:5173\",\n    credentials: true,\n  },\n  mariadb: mariadbConfig,\n};\n\nexport default config;\n","import { Router , Request, Response } from 'express'\n\nconst router = Router()\n\ninterface InfoData {\n  status: string;\n}\n\nrouter.get('/', (req: Request,res: Response<InfoData>) => {\n  res.status(200).json({ status: \"OK\" })\n})\n\nexport default router\n","import { Router, Request, Response } from \"express\";\nimport { UserController } from \"../controllers/User/UserController.ts\";\n\nconst router = Router();\n\nimport { ICreateUser } from \"../domain/entities/User/User.ts\";\n\nrouter.post(\"/\", async (req: Request<{}, {}, ICreateUser>,res: Response): Promise<void> => {\n    const { email, password, confirmPassword } = req.body;\n\n    const result = await UserController.createUserController({ email, password, confirmPassword });\n\n    if (result.error) {\n      res.status(400).json({ error: result.error });\n      return;\n    }\n\n    res.status(201).json(result);\n  }\n);\n\nexport default router;\n","import mariadb, { Pool, Connection } from \"mariadb\";\nimport config from \"../config.ts\";\nimport { createTables } from \"./createTables.ts\";\n\nconst pool: Pool = mariadb.createPool(config.mariadb);\n\npool\n  .getConnection()\n  .then((conn: Connection) => {\n    console.log(\"[ DB ] ConexÃ£o estabelecida com sucesso.\");\n    conn.end();\n  })\n  .catch((err: any) => {\n    console.error(\"[ DB ] Erro ao conectar-se ao banco de dados:\", err);\n  });\n\nawait createTables(pool);\n\nexport default pool;\n","import { readFile } from \"fs\";\n\nconst filePath = \"./create_tables.sql\";\n\nfunction readSQLFile(filePath: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    readFile(filePath, \"utf8\", (error, data) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nasync function executeSQLCommands(\n  connection: any,\n  sqlCommands: string[]\n): Promise<void> {\n  try {\n    for (const sqlCommand of sqlCommands) {\n      await connection.query(sqlCommand);\n    }\n    console.log(\"[ DB ] Tabelas criadas com sucesso.\");\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      const errorMessage: string = error.message;\n      console.error(errorMessage);\n    } else {\n      console.error(\"Ocorreu um erro desconhecido\");\n    }\n  }\n}\n\nasync function createTables(connection: any): Promise<void> {\n  try {\n    const sqlScript = await readSQLFile(filePath);\n    const sqlCommands = sqlScript\n      .split(\";\")\n      .map((command) => command.trim())\n      .filter((command) => command);\n    await executeSQLCommands(connection, sqlCommands);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      const errorMessage: string = error.message;\n      console.error(errorMessage);\n    } else {\n      console.error(\"Ocorreu um erro desconhecido\");\n    }\n  }\n}\n\nexport { createTables };\n","import { randomUUID } from \"node:crypto\";\nimport { hash } from \"../../../../utils/hashPassword.ts\";\n\nimport { ICreateUser } from \"../User.ts\";\n\nexport const createUser = ({\n  email,\n  password,\n  confirmPassword,\n  existingUser,\n}: ICreateUser): object => {\n  if (existingUser) return { error: \"user already exist\" };\n  if (!email) return { error: \"email is required\" };\n  if (!password) return { error: \"password is required\" };\n  if (!confirmPassword) return { error: \"confirmPassword is required\" };\n\n  const id: string = randomUUID();\n\n  if (password !== confirmPassword) return { error: \"passwords do not match\" };\n\n  return {\n    id,\n    email,\n    password: hash(password),\n  };\n};\n","import bcrypt from \"bcryptjs\";\n\nconst hash = (password: string): string => {\n  const salt = bcrypt.genSaltSync(10);\n  const hashPassword = bcrypt.hashSync(password, salt);\n  return hashPassword;\n};\n\nconst compare = (password: string, hashPassword: string): boolean => {\n  return bcrypt.compareSync(password, hashPassword)\n}\n\nexport { hash, compare };\n","import { createUser } from './useCases/CreateUser.ts';\n\ninterface IUser {\n  createUser: Function;\n}\n\nexport interface ICreateUser {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  existingUser: string;\n}\n\nexport const User: IUser = {\n  createUser,\n};\n\n","import db from \"../../db/mariadb.js\";\nimport { User } from \"../../domain/entities/User/User.js\";\n\nimport { ICreateUser } from \"../../domain/entities/User/User.ts\";\n\nexport const createUserRepository = async ({\n  email,\n  password,\n  confirmPassword,\n}: ICreateUser): Promise<object> => {\n  let conn;\n\n  try {\n    conn = await db.getConnection();\n\n    const existingUser = await conn.query(\n      \"SELECT email FROM users WHERE email=?\",\n      [email]\n    );\n\n    const user = await User.createUser({\n      email,\n      password,\n      confirmPassword,\n      existingUser: existingUser.length > 0,\n    });\n\n    if (user.error) return user;\n\n    const query1 = \"INSERT INTO users (id, email, password) VALUES (?,?,?);\";\n\n    const row = await conn.query(query1, [user.id, user.email, user.password]);\n\n    if (row.affectedRows === 1)\n      return { success: \"User successfully registered!\" };\n\n    return { error: \"Unable to register user!\" };\n  } catch (error) {\n    return { error: \"An error occurred while creating a user\" };\n  } finally {\n    if (conn) {\n      conn.release();\n    }\n  }\n};\n","import { createUserRepository } from './createUserRepository.ts'\n\ninterface IUserRepository {\n  createUserRepository: Function;\n}\n\nexport const UserRepository: IUserRepository = {\n  createUserRepository,\n};\n\n","import { UserRepository } from \"../../repositories/User/UserRepository.ts\";\n\nimport { ICreateUser } from \"../../domain/entities/User/User.ts\";\n\nexport const createUserController = async ({\n  email,\n  password,\n  confirmPassword,\n}: ICreateUser): Promise<{ sucess: string } | { error: string }> => {\n\n  const user = await UserRepository.createUserRepository({ email, password, confirmPassword });\n\n  return user;\n};\n","import { createUserController } from \"./CreateUserController.ts\";\n\ninterface IUserController {\n  createUserController: Function;\n}\n\nexport const UserController: IUserController = {\n  createUserController,\n};\n","import { Express } from \"express\";\nimport infoRouter from \"./infoRouter.js\";\nimport UserRouter from \"./UserRouter.ts\"\n\nconst v1 = \"/v1\";\n\nfunction routes(app: Express): void {\n  app.use(`${v1}/info`, infoRouter);\n  app.use(`${v1}/users`, UserRouter);\n}\n\nexport default routes;\n"],"mappings":"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","names":["Router","filePath","router","Router","app"]}