{"version":3,"sources":["../src/app.ts","../src/config.ts","../src/routes/infoRouter.ts","../src/routes/userRouter.ts","../src/db/mariadb.ts","../src/db/createTables.ts","../src/entities/User/useCases/createUser.ts","../src/utils/hashPassword.ts","../src/entities/User/useCases/deleteUser.ts","../src/entities/User/useCases/authUser.ts","../src/entities/User/user.ts","../src/repositories/User/createUserRepository.ts","../src/repositories/User/deleteUserRepository.ts","../src/utils/jwt.ts","../src/repositories/User/authUserRepository.ts","../src/repositories/User/userRepository.ts","../src/controllers/User/createUserController.ts","../src/controllers/User/deleteUserController.ts","../src/controllers/User/authUserController.ts","../src/controllers/User/UserController.ts","../src/routes/profileRouter.ts","../src/entities/Profiles/useCases/createProfile.ts","../src/entities/Profiles/useCases/myProfile.ts","../src/entities/Profiles/useCases/findProfilesByNickname.ts","../src/entities/Profiles/profile.ts","../src/repositories/Profiles/createProfileRepository.ts","../src/repositories/Profiles/myProfileRepository.ts","../src/repositories/Profiles/findProfilesByNicknameRepository.ts","../src/repositories/Profiles/profileRepository.ts","../src/controllers/Profiles/createProfileController.ts","../src/controllers/Profiles/myProfileController.ts","../src/controllers/Profiles/findProfilesByNicknameController.ts","../src/controllers/Profiles/profileController.ts","../src/middlewares/upload.ts","../src/utils/formatFileSize.ts","../src/utils/compressImage.ts","../src/utils/dateExp.ts","../src/middlewares/validToken.ts","../src/routes/index.ts","../src/middlewares/JSONFormat.ts"],"sourcesContent":["import express, { Express } from \"express\";\nimport cors from \"cors\";\nimport config from \"./config.js\";\nimport cookieParser from \"cookie-parser\";\nimport routes from \"./routes/index.ts\";\nimport { errorHandlerJSON } from \"./middlewares/JSONFormat.ts\";\nconst app: Express = express();\n\napp.use(cors(config.cors));\napp.use(cookieParser());\napp.use(express.json());\napp.use(errorHandlerJSON);\napp.use(\"/\", express.static(\"src/public\"));\napp.use(\"/default\", express.static(\"src/default\"));\napp.use(\"/uploads\", express.static(\"src/uploads\"));\n\nroutes(app);\n\nexport default app;\n","import dotenv from \"dotenv\";\nimport { readFileSync } from \"fs\";\nimport { PoolConfig } from \"mariadb\";\n\ndotenv.config();\n\ninterface Certificates {\n  key: Buffer;\n  cert: Buffer;\n}\n\ninterface App {\n  PORT: string | number;\n  HOST?: string;\n  baseUrl?: string;\n}\n\ninterface Cors {\n  origin: string;\n  credentials: boolean;\n}\n\nconst mariadbConfig: PoolConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE,\n  port: Number(process.env.DB_PORT),\n  connectionLimit: 5,\n};\n\ninterface Config {\n  production: string | undefined;\n  certificates: Certificates;\n  app: App;\n  cors: Cors;\n  mariadb: PoolConfig;\n}\n\nconst config: Config = {\n  production: process.env.PRODUCTION,\n  certificates: {\n    key: readFileSync(\"./server.key\"),\n    cert: readFileSync(\"./server.crt\"),\n  },\n  app: {\n    PORT: process.env.PORT ?? 3002,\n    HOST: process.env.HOST,\n    baseUrl: process.env.BASE_URL,\n  },\n  cors: {\n    origin: \"https://localhost:5173\",\n    credentials: true,\n  },\n  mariadb: mariadbConfig,\n};\n\nexport default config;\n","import { Router , Request, Response } from 'express'\n\nconst router = Router()\n\ninterface InfoData {\n  status: string;\n}\n\nrouter.get('/', (req: Request,res: Response<InfoData>) => {\n  res.status(200).json({ status: \"OK\" })\n})\n\nexport default router\n","import { Router, Request, Response } from \"express\";\nimport { UserController } from \"../controllers/User/UserController.js\";\n\nconst router = Router();\n\nimport { ICreateUser, IAuthUser } from \"../entities/User/user.ts\";\n\nrouter.post(\n  \"/\",\n  async (req: Request<{}, {}, ICreateUser>, res: Response): Promise<void> => {\n    const { email, password, confirmPassword } = req.body;\n\n    const result = await UserController.createUserController({\n      email,\n      password,\n      confirmPassword,\n    });\n\n    if (result.error) {\n      res.status(400).json({ error: result.error });\n      return;\n    }\n\n    res.status(201).json(result);\n  }\n);\n\nrouter.post(\n  \"/auth\",\n  async (req: Request<{}, {}, IAuthUser>, res: Response): Promise<void> => {\n    const { email, password } = req.body;\n\n    const result = await UserController.authUserController({\n      email,\n      password,\n    });\n\n    if (result.error) {\n      res.status(400).json({ error: result.error });\n      return;\n    }\n\n    res.cookie(\"token\", result.token, {\n      httpOnly: true,\n      secure: true,\n      sameSite: \"none\",\n    });\n    res.status(200).json(result);\n  }\n);\n\nrouter.delete(\n  \"/:id\",\n  async (\n    req: Request<{ id: string }, {}, {}, ICreateUser>,\n    res: Response\n  ): Promise<void> => {\n    const id: string = req.params.id;\n\n    const result = await UserController.deleteUserController({ id });\n\n    if (result.error) {\n      res.status(400).json({ error: result.error });\n      return;\n    }\n\n    res.status(200).json(result);\n  }\n);\n\nexport default router;\n","import mariadb, { Pool, Connection } from \"mariadb\";\nimport config from \"../config.ts\";\nimport { createTables } from \"./createTables.ts\";\n\nconst pool: Pool = mariadb.createPool(config.mariadb);\n\npool\n  .getConnection()\n  .then((conn: Connection) => {\n    console.log(\"[ DB ] ConexÃ£o estabelecida com sucesso.\");\n    conn.end();\n  })\n  .catch((err: any) => {\n    console.error(\"[ DB ] Erro ao conectar-se ao banco de dados:\", err);\n  });\n\nawait createTables(pool);\n\nexport default pool;\n","import { readFile } from \"fs\";\n\nconst filePath = \"./create_tables.sql\";\n\nfunction readSQLFile(filePath: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    readFile(filePath, \"utf8\", (error, data) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nasync function executeSQLCommands(\n  connection: any,\n  sqlCommands: string[]\n): Promise<void> {\n  try {\n    for (const sqlCommand of sqlCommands) {\n      await connection.query(sqlCommand);\n    }\n    console.log(\"[ DB ] Tabelas criadas com sucesso.\");\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      const errorMessage: string = error.message;\n      console.error(errorMessage);\n    } else {\n      console.error(\"Ocorreu um erro desconhecido\");\n    }\n  }\n}\n\nasync function createTables(connection: any): Promise<void> {\n  try {\n    const sqlScript = await readSQLFile(filePath);\n    const sqlCommands = sqlScript\n      .split(\";\")\n      .map((command) => command.trim())\n      .filter((command) => command);\n    await executeSQLCommands(connection, sqlCommands);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      const errorMessage: string = error.message;\n      console.error(errorMessage);\n    } else {\n      console.error(\"Ocorreu um erro desconhecido\");\n    }\n  }\n}\n\nexport { createTables };\n","import { randomUUID } from \"node:crypto\";\nimport { hash } from \"../../../utils/hashPassword.ts\";\n\nimport { ICreateUser } from \"../user.ts\";\n\nexport const createUser = ({\n  email,\n  password,\n  confirmPassword,\n  existingUser,\n}: ICreateUser): object => {\n  if (existingUser) return { error: \"user already exist\" };\n  if (!email) return { error: \"email is required\" };\n  if (!password) return { error: \"password is required\" };\n  if (!confirmPassword) return { error: \"confirmPassword is required\" };\n\n  const id: string = randomUUID();\n\n  if (password !== confirmPassword) return { error: \"passwords do not match\" };\n\n  return {\n    id,\n    email,\n    password: hash(password),\n  };\n};\n","import bcrypt from \"bcryptjs\";\n\nconst hash = (password: string): string => {\n  const salt = bcrypt.genSaltSync(10);\n  const hashPassword = bcrypt.hashSync(password, salt);\n  return hashPassword;\n};\n\nconst compare = (password: string, hashPassword: string): boolean => {\n  return bcrypt.compareSync(password, hashPassword)\n}\n\nexport { hash, compare };\n","import { ICreateUser } from \"../user.ts\";\n\nexport const deleteUser = ({\n  id,\n  existingUser\n}: ICreateUser): object => {\n  if (!id) return { error: \"id is required!\" };\n  if (!existingUser) return { error: \"User not found!\" };\n\n  return {\n    id,\n    existingUser\n  };\n};\n","\nimport { IAuthUser } from \"../user.ts\";\n\nexport const authUser = ({ email, password }: IAuthUser): object => {\n  if (!email) return { error: \"email is required\" };\n  if (!password) return { error: \"password is required\" };\n  \n  return {\n    email,\n    password,\n  };\n};\n","import { createUser } from \"./useCases/createUser.ts\";\nimport { deleteUser } from \"./useCases/deleteUser.ts\";\nimport { authUser } from \"./useCases/authUser.ts\";\n\ninterface IUser {\n  createUser: Function;\n  deleteUser: Function;\n  authUser: Function;\n}\n\nexport interface ICreateUser {\n  id?: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  existingUser: string;\n}\n\nexport interface IAuthUser {\n  email: string;\n  password: string;\n  hashPassword: string;\n  existingUser: [{\n    id: string;\n    email: string;\n    password: string;\n    created_at: Date;\n    updated_at: Date;\n  }]\n}\n\nexport const User: IUser = {\n  createUser,\n  deleteUser,\n  authUser,\n};\n","import db from \"../../db/mariadb.js\";\nimport { User, ICreateUser } from \"../../entities/User/user.ts\";\n\nexport const createUserRepository = async ({\n  email,\n  password,\n  confirmPassword,\n}: ICreateUser): Promise<object> => {\n  let conn;\n\n  try {\n    conn = await db.getConnection();\n\n    const existingUser = await conn.query(\n      \"SELECT email FROM users WHERE email=?\",\n      [email]\n    );\n\n    const user = await User.createUser({\n      email,\n      password,\n      confirmPassword,\n      existingUser: existingUser.length > 0,\n    });\n\n    if (user.error) return user;\n\n    const query1 = \"INSERT INTO users (id, email, password) VALUES (?,?,?);\";\n\n    const row = await conn.query(query1, [user.id, user.email, user.password]);\n\n    if (row.affectedRows === 1)\n      return { sucess: \"User successfully registered!\", id: user.id };\n\n    return { error: \"Unable to register user!\" };\n  } catch (error) {\n    return { error: \"An error occurred while creating a user\" };\n  } finally {\n    if (conn) {\n      conn.release();\n    }\n  }\n};\n","import db from \"../../db/mariadb.js\";\nimport { User, ICreateUser } from \"../../entities/User/user.ts\";\n\nexport const deleteUserRepository = async ({\n  id\n}: ICreateUser): Promise<object> => {\n  let conn;\n\n  try {\n    conn = await db.getConnection();\n\n    const existingUser = await conn.query(\n      \"SELECT email FROM users WHERE id=?\",\n      [id]\n    );\n\n    const user = await User.deleteUser({\n      id,\n      existingUser: existingUser.length > 0,\n    });\n\n    if (user.error) return user;\n\n    const query = \"DELETE FROM users WHERE id=?\";\n\n    const row = await conn.query(query, [user.id]);\n\n    if (row.affectedRows === 1)\n      return { sucess: \"User deleted successfully!\" };\n\n    return { error: \"Unable to delete user!\" };\n  } catch (error) {\n    return { error: \"An error occurred while deleting the user\" };\n  } finally {\n    if (conn) {\n      conn.release();\n    }\n  }\n};\n","import { readFileSync } from \"node:fs\";\nimport jwt, { VerifyOptions } from \"jsonwebtoken\";\n\nconst privateKey: Buffer = readFileSync(\"./server.key\");\nconst publicKey: Buffer = readFileSync('server.key');\n\ninterface TokenPayload {\n  id: string;\n  exp: number;\n}\n\nexport const sign = (userId: string): string => {\n  const tokenPayload: TokenPayload = {\n    id: userId,\n    exp: Math.floor(Date.now() / 1000) + 60 * 60, // 1 hour\n  };\n\n  return jwt.sign(\n    tokenPayload,\n    privateKey.toString(), // Convert privateKey to string\n    { algorithm: \"RS256\" }\n  );\n};\n\nexport const verify = (token: string): string | object => {\n  const options: VerifyOptions = {\n    algorithms: ['RS256'],\n  };\n\n  return jwt.verify(token, publicKey.toString(), options);\n};\n","import db from \"../../db/mariadb.js\";\nimport { User, IAuthUser } from \"../../entities/User/user.ts\";\nimport { compare } from \"../../utils/hashPassword.ts\";\nimport { sign } from \"../../utils/jwt.ts\";\n\nexport const authUserRepository = async ({\n  email,\n  password,\n}: IAuthUser): Promise<object> => {\n  let conn;\n\n  try {\n    const user = User.authUser({\n      email,\n      password,\n    });\n\n    if(user.error) return user\n\n    conn = await db.getConnection();\n    \n    const existingUser: any = await conn.query(\"SELECT * FROM users WHERE email=?\", [\n      user.email,\n    ]);\n\n    if (existingUser.length === 0) return { error: \"Invalid email or password\" };\n\n    if (!compare(user.password, existingUser[0].password))\n      return { error: \"Invalid email or password\" };\n\n    if (user.error) return user;\n\n    const token = sign(existingUser[0].id)\n\n    return {\n      sucess: \"Autenticado com sucesso!\",\n      token\n    } \n  } catch (error) {\n    return { error: \"An error occurred while authenticating the user\" };\n  } finally {\n    if (conn) {\n      conn.release();\n    }\n  }\n};\n","import { createUserRepository } from './createUserRepository.js'\nimport { deleteUserRepository } from './deleteUserRepository.ts';\nimport { authUserRepository } from './authUserRepository.ts';\n\ninterface IUserRepository {\n  createUserRepository: Function;\n  deleteUserRepository: Function;\n  authUserRepository: Function;\n}\n\nexport const UserRepository: IUserRepository = {\n  createUserRepository,\n  deleteUserRepository,\n  authUserRepository\n};\n\n","import { UserRepository } from \"../../repositories/User/userRepository.ts\";\n\nimport { ICreateUser } from \"../../entities/User/user.ts\";\n\nexport const createUserController = async ({\n  email,\n  password,\n  confirmPassword,\n}: ICreateUser): Promise<{ sucess: string } | { error: string }> => {\n\n  const user = await UserRepository.createUserRepository({ email, password, confirmPassword });\n\n  return user;\n};\n","import { UserRepository } from \"../../repositories/User/userRepository.ts\";\n\nimport { ICreateUser } from \"../../entities/User/user.ts\";\n\nexport const deleteUserController = async ({\n  id\n}: ICreateUser): Promise<{ sucess: string } | { error: string }> => {\n\n  const user = await UserRepository.deleteUserRepository({ id })\n\n  return user;\n};\n","import { UserRepository } from \"../../repositories/User/userRepository.ts\";\n\nimport { IAuthUser } from \"../../entities/User/user.ts\";\n\nexport const authUserController = async ({\n  email,\n  password\n}: IAuthUser): Promise<{ sucess: string } | { error: string }> => {\n\n  const user = await UserRepository.authUserRepository({ email, password });\n\n  return user;\n};\n","import { createUserController } from \"./createUserController.ts\";\nimport { deleteUserController } from \"./deleteUserController.ts\";\nimport { authUserController } from \"./authUserController.ts\";\n\ninterface IUserController {\n  createUserController: Function;\n  deleteUserController: Function;\n  authUserController: Function;\n}\n\nexport const UserController: IUserController = {\n  createUserController,\n  deleteUserController,\n  authUserController\n};\n","import { Router, Request, Response } from \"express\";\nimport { ProfileController } from \"../controllers/Profiles/profileController.ts\";\nimport { upload } from \"../middlewares/upload.ts\";\nimport { formatFileSize } from \"../utils/formatFileSize.ts\";\nimport { compressImage } from \"../utils/compressImage.ts\";\n\nconst router = Router();\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user: { id: string };\n    }\n  }\n}\n\nrouter.post(\"/\", async (req: Request, res: Response): Promise<void> => {\n  const { nickname, bio, picture, links } = req.body;\n\n  const userId: string = (req.user as { id: string }).id;\n\n  const result = await ProfileController.createProfileController({\n    nickname,\n    bio,\n    picture,\n    links,\n    reqUserId: userId,\n  });\n\n  if (result.error) {\n    res.status(400).json({ error: result.error });\n    return;\n  }\n\n  res.status(201).json(result);\n});\n\nrouter.get(\"/myprofile\", async (req: Request, res: Response): Promise<void> => {\n  const userId: string = (req.user as { id: string }).id;\n\n  const result = await ProfileController.myProfileController({\n    reqUserId: userId,\n  });\n\n  if (result.error) {\n    res.status(400).json({ error: result.error });\n    return;\n  }\n\n  res.status(200).json(result);\n});\n\n\nrouter.post(\"/find\", async (req: Request, res: Response): Promise<void> => {\n  const userId: string = (req.user as { id: string }).id;\n\n  const result = await ProfileController.findProfilesByNicknameController({\n    reqUserId: userId,\n    nickname: req.body.nickname\n  });\n\n  if (result.error) {\n    res.status(400).json({ error: result.error });\n    return;\n  }\n\n  res.status(200).json(result);\n});\n\n\nrouter.post(\"/upload\", upload.single(\"picture\"),async (req: Request, res: Response): Promise<void> => {\n  try {\n    const file = req.file\n\n    if (!file) {\n      res.status(400).json({ error: \"No files received.\"})\n      return\n    }\n\n    const compress: string[] = await compressImage(file.filename, file.path) \n \n    console.log(\"compress: \", compress)\n  \n    const objImage: object = {\n      fieldname: 'picture',\n      originalname: file?.originalname,\n      filename: file?.filename,\n      path: file?.path,\n      size: formatFileSize(Number(file?.size)),\n      compress: compress\n    }\n  \n    res.status(200).json({ sucess: objImage });\n  } catch (error) {\n    console.error('Error uploading and compressing the image:', error);\n    res.status(500).json({ error: 'Error uploading and compressing the image' });\n  }\n});\n\nexport default router;\n","import { randomUUID } from \"node:crypto\";\n\nimport { ICreateProfile } from \"../profile.ts\";\n\nexport const createProfile = ({\n  nickname,\n  bio,\n  picture,\n  links,\n  reqUserId,\n}: ICreateProfile): object => {\n  if (!nickname) return { error: \"nickname is required\" };\n  if (!reqUserId) return { error: \"reqUserId is required\" };\n\n  const id: string = randomUUID();\n\n  if (!bio) bio = \"Write your biography. ð»\";\n  if (!picture) picture = \"/default/avatar.png\";\n  if (links) links = JSON.stringify(links);\n  if (!links) links = JSON.stringify([\"link.com\", \"mylink.com\"]);\n\n  return {\n    id,\n    nickname,\n    bio,\n    picture,\n    links,\n    reqUserId,\n  };\n};\n","import { IMyProfile } from \"../profile.ts\";\n\nexport const myProfile = ({ reqUserId }: IMyProfile): object => {\n  if (!reqUserId) return { error: \"reqUserId is required\" };\n\n  return {\n    reqUserId,\n  };\n};\n","import { IFindProfileByNickname } from \"../profile.ts\";\n\nexport const findProfilesByNickname = ({\n  reqUserId,\n  nickname\n}: IFindProfileByNickname): object => {\n  if (!reqUserId) return { error: \"reqUserId is required\" };\n  if (!nickname) return { error: \"nickname is required\" };\n\n  return {\n    reqUserId,\n    nickname\n  };\n};\n","import { createProfile } from \"./useCases/createProfile.ts\"; \nimport { myProfile } from \"./useCases/myProfile.ts\";\nimport { findProfilesByNickname } from \"./useCases/findProfilesByNickname.ts\";\n\ninterface IProfile {\n  createProfile: Function;\n  myProfile: Function;\n  findProfilesByNickname: Function;\n}\n\nexport interface ICreateProfile {\n  id: string;\n  nickname: string;\n  bio: string;\n  picture: string;\n  links: string;\n  reqUserId: string\n}\n\nexport interface IMyProfile {\n  reqUserId: string\n}\n\nexport interface IFindProfileByNickname {\n  reqUserId: string;\n  nickname: string;\n}\n\nexport const Profile: IProfile = {\n  createProfile,\n  myProfile,\n  findProfilesByNickname\n};\n","import db from \"../../db/mariadb.js\";\nimport { Profile, ICreateProfile } from \"../../entities/Profiles/profile.js\";\n\nexport const createProfileRepository = async ({\n  nickname,\n  bio,\n  picture,\n  links,\n  reqUserId,\n}: ICreateProfile): Promise<object> => {\n  let conn;\n\n  try {\n    const profile = Profile.createProfile({\n      nickname,\n      bio,\n      picture,\n      links,\n      reqUserId,\n    });\n\n    if (profile.error) return profile;\n\n    conn = await db.getConnection();\n\n    const profileAlreadyExists = await conn.query(\n      \"SELECT * FROM user_profiles WHERE user_id=?\",\n      [profile.reqUserId]\n    );\n\n    if (profileAlreadyExists.length > 0)\n      return { error: \"you already have a profile\" };\n\n    const row = await conn.query(\n      `\n\t    INSERT INTO user_profiles\n      (id, user_id, nickname, bio, picture, links)\n      VALUES\n      (?,?,?,?,?,?);\n\t    `,\n      [\n        profile.id,\n        profile.reqUserId,\n        profile.nickname,\n        profile.bio,\n        profile.picture,\n        profile.links,\n      ]\n    );\n\n    if (row.affectedRows === 1)\n      return { sucess: \"Profile successfully added!\", id: profile.id };\n\n    return { error: \"Unable to register user!\" };\n  } catch (error) {\n    return { error: \"Unable to add profile!\" };\n  } finally {\n    if (conn) conn.release();\n  }\n};\n","import db from \"../../db/mariadb.js\";\nimport { Profile, ICreateProfile } from \"../../entities/Profiles/profile.js\";\n\nexport const myProfileRepository = async ({\n  reqUserId,\n}: ICreateProfile): Promise<object> => {\n  let conn;\n\n  try {\n    const profile = Profile.myProfile({\n      reqUserId,\n    });\n\n    if (profile.error) return profile;\n\n    conn = await db.getConnection();\n\n    const existingProfile = await conn.query(\n      \"SELECT id, nickname, bio, picture, links, 'created_at', 'updated_at' FROM user_profiles WHERE user_id=?\",\n      [profile.reqUserId]\n    );\n\n    if (!existingProfile[0].id) return { error: \"profile does not exist\" };\n\n    return { sucess: existingProfile[0] };\n  } catch (error) {\n    return { error: \"could not find profile\" };\n  } finally {\n    if (conn) conn.release();\n  }\n};\n","import db from \"../../db/mariadb.ts\";\nimport {\n  Profile,\n  IFindProfileByNickname,\n} from \"../../entities/Profiles/profile.ts\";\n\nexport const findProfilesByNicknameRepository = async ({\n  reqUserId,\n  nickname,\n}: IFindProfileByNickname): Promise<object> => {\n  let conn;\n\n  try {\n    const profile = Profile.findProfilesByNickname({\n      reqUserId,\n      nickname,\n    });\n\n    if (profile.error) return profile;\n\n    conn = await db.getConnection();\n\n    const existingProfile = await conn.query(\n      `SELECT up.id, up.nickname, up.picture \n      FROM user_profiles AS up \n      INNER JOIN users AS u \n      ON u.id = up.user_id WHERE up.nickname like ?`,\n      [`${profile.nickname}%`]\n    );\n\n    if (existingProfile.length === 0) return [];\n\n    return { sucess: existingProfile[0] };\n  } catch (error) {\n    return { error: \"could not find profile\" };\n  } finally {\n    if (conn) conn.release();\n  }\n};\n","import { createProfileRepository } from \"./createProfileRepository.ts\";\nimport { myProfileRepository } from \"./myProfileRepository.ts\";\nimport { findProfilesByNicknameRepository } from \"./findProfilesByNicknameRepository.ts\";\n\ninterface IProfileRepository {\n  createProfileRepository: Function;\n  myProfileRepository: Function;\n  findProfilesByNicknameRepository: Function;\n}\n\nexport const ProfileRepository: IProfileRepository = {\n  createProfileRepository,\n  myProfileRepository,\n  findProfilesByNicknameRepository,\n};\n","import { ProfileRepository } from \"../../repositories/Profiles/profileRepository.js\";\n\nimport { ICreateProfile } from \"../../entities/Profiles/profile.js\";\n\nexport const createProfileController = async ({\n  nickname,\n  bio,\n  picture,\n  links,\n  reqUserId\n}: ICreateProfile): Promise<{ sucess: string } | { error: string }> => {\n\n  const profile = await ProfileRepository.createProfileRepository({ nickname, bio, picture, links, reqUserId });\n\n  return profile;\n};\n","import { ProfileRepository } from \"../../repositories/Profiles/profileRepository.js\";\n\nimport { ICreateProfile } from \"../../entities/Profiles/profile.js\";\n\nexport const myProfileController = async ({\n  reqUserId,\n}: ICreateProfile): Promise<{ sucess: string } | { error: string }> => {\n  const profile = await ProfileRepository.myProfileRepository({ reqUserId });\n\n  return profile;\n};\n","import { ProfileRepository } from \"../../repositories/Profiles/profileRepository.ts\";\n\nimport { IFindProfileByNickname } from \"../../entities/Profiles/profile.js\";\n\nexport const findProfilesByNicknameController = async ({\n  reqUserId,\n  nickname\n}: IFindProfileByNickname): Promise<{ sucess: string } | { error: string } | [] > => {\n  const profile = await ProfileRepository.findProfilesByNicknameRepository({ reqUserId, nickname })\n\n  return profile;\n};\n","import { createProfileController } from \"./createProfileController.ts\";\nimport { myProfileController } from \"./myProfileController.ts\";\nimport { findProfilesByNicknameController } from \"./findProfilesByNicknameController.ts\";\n\ninterface IProfileController {\n  createProfileController: Function;\n  myProfileController: Function;\n  findProfilesByNicknameController: Function;\n}\n\nexport const ProfileController: IProfileController = {\n  createProfileController,\n  myProfileController,\n  findProfilesByNicknameController,\n};\n","import multer, { Multer, StorageEngine } from 'multer';\nimport { randomUUID } from 'node:crypto';\n\nconst storage: StorageEngine = multer.diskStorage({\n  destination: 'src/uploads/',\n  filename: (req, file, cb) => {\n    const uniqueSuffix = `${Date.now()}-${randomUUID()}`; // Gera um sufixo Ãºnico para evitar nomes duplicados\n    const fileName = `${uniqueSuffix}-${file.originalname}`;\n    cb(null, fileName);\n  }\n});\n\nexport const upload: Multer = multer({ storage });\n","export const formatFileSize = (size: number): string  => {\n  const kiloBytes: number = 1024;\n  const megaBytes: number = kiloBytes * 1024;\n  const gigaBytes: number = megaBytes * 1024;\n\n  if (size < kiloBytes) {\n    return size + ' bytes';\n  } else if (size < megaBytes) {\n    const sizeInKB: string = (size / kiloBytes).toFixed(2);\n    return sizeInKB + ' KB';\n  } else if (size < gigaBytes) {\n    const sizeInMB: string = (size / megaBytes).toFixed(2);\n    return sizeInMB + ' MB';\n  } else {\n    const sizeInGB: string = (size / gigaBytes).toFixed(2);\n    return sizeInGB + ' GB';\n  }\n}\n","import sharp from 'sharp';\n\nconst sizes: number[] = [150, 600, 1080]\nconst names: string[] = [];\n\nexport const compressImage = async (filename: string, path: string) => {\n\n  sizes.forEach(async item => {\n    const compressedImagePath = `${item}-compressed_${filename}`;\n\n    await sharp(path)\n      .resize({ width: item })\n      .png({ quality: 80, })\n      .toFile(`src/uploads/${compressedImagePath}`)\n      .then(data => {\n        console.log(\"data: \", data)\n        names.push(compressedImagePath)\n      })\n\n  })\n\n  return names\n};\n","export const dateExp = (expire: string): string => {\n  const now: number = Math.floor(Date.now() / 1000);\n  const remainingTime: number = parseInt(expire) - now;\n\n  // Convert the remaining time to hours and minutes\n  const remainingMinutes: number = Math.floor(remainingTime / 60);\n  const remainingHours: number = Math.floor(remainingMinutes / 60);\n  const remainingMinutesAfterLastHour: number = remainingMinutes % 60;\n\n  // Display the appropriate message based on the remaining time\n  if (remainingHours > 0) {\n    return `The token expires in ${remainingHours} hours and ${remainingMinutesAfterLastHour} minutes`;\n  } else if (remainingMinutesAfterLastHour > 0) {\n    return `The token expires in ${remainingMinutesAfterLastHour} minutes`;\n  } else {\n    return 'The token has expired';\n  }\n};\n","import { Request, Response, NextFunction, RequestHandler } from 'express';\nimport { dateExp } from '../utils/dateExp.ts';\nimport { verify } from '../utils/jwt.ts';\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    exp: string;\n  };\n}\n\nexport const validateToken: RequestHandler = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const token: string | undefined = req.cookies.token;\n\n  if (token) {\n    try {\n      // Verificar se o token JWT Ã© vÃ¡lido e decodificar o payload\n      const decoded: any = verify(token);\n\n      const now: number = Date.now().valueOf() / 1000;\n      if (decoded.exp < now) {\n        res.status(401).json({ error: 'Authentication failed: token expired' });\n        return;\n      }\n\n      const authenticatedReq = req as AuthenticatedRequest;\n      authenticatedReq.user = {\n        id: decoded.id,\n        exp: dateExp(decoded.exp),\n      };\n\n      next();\n    } catch (error) {\n      res.status(401).json({ error: 'Authentication failed: invalid token' });\n    }\n  } else {\n    res.status(401).json({ error: 'Authentication failed: token cookie missing' });\n  }\n};\n","import { Express } from \"express\";\nimport infoRouter from \"./infoRouter.js\";\nimport UserRouter from \"./userRouter.ts\";\nimport ProfileRouter from \"./profileRouter.ts\";\nimport { validateToken } from \"../middlewares/validToken.ts\";\n\nconst v1 = \"/v1\";\n\nfunction routes(app: Express): void {\n  app.use(`${v1}/info`, infoRouter);\n  app.use(`${v1}/users`, UserRouter);\n  app.use(`${v1}/profiles`, validateToken, ProfileRouter);\n}\n\nexport default routes;\n","import { ErrorRequestHandler, Request, Response, NextFunction } from \"express\";\n\nconst errorHandlerJSON: ErrorRequestHandler = (\n  error: any,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  if (error instanceof SyntaxError && error.message.includes(\"JSON\")) {\n    res\n      .status(400)\n      .json({ message: \"Request error. Check the JSON format.\" });\n  } else {\n    next();\n  }\n};\n\nexport { errorHandlerJSON };\n"],"mappings":"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","names":["Router","filePath","readFileSync","router","Router","Router","randomUUID","randomUUID","router","Router","app"]}