{"version":3,"sources":["../../../../../src/domain/entities/User/useCases/CreateUser.ts","../../../../../src/utils/hashPassword.ts"],"sourcesContent":["import { randomUUID } from \"node:crypto\";\nimport { hash } from \"../../../../utils/hashPassword.ts\";\n\nimport { ICreateUser } from \"../User.ts\";\n\nexport const createUser = ({\n  email,\n  password,\n  confirmPassword,\n  existingUser,\n}: ICreateUser): object => {\n  if (existingUser) return { error: \"user already exist\" };\n  if (!email) return { error: \"email is required\" };\n  if (!password) return { error: \"password is required\" };\n  if (!confirmPassword) return { error: \"confirmPassword is required\" };\n\n  const id: string = randomUUID();\n\n  if (password !== confirmPassword) return { error: \"passwords do not match\" };\n\n  return {\n    id,\n    email,\n    password: hash(password),\n  };\n};\n","import bcrypt from \"bcryptjs\";\n\nconst hash = (password: string): string => {\n  const salt = bcrypt.genSaltSync(10);\n  const hashPassword = bcrypt.hashSync(password, salt);\n  return hashPassword;\n};\n\nconst compare = (password: string, hashPassword: string): boolean => {\n  return bcrypt.compareSync(password, hashPassword)\n}\n\nexport { hash, compare };\n"],"mappings":";AAAA,SAAS,kBAAkB;;;ACA3B,OAAO,YAAY;AAEnB,IAAM,OAAO,CAAC,aAA6B;AACzC,QAAM,OAAO,OAAO,YAAY,EAAE;AAClC,QAAM,eAAe,OAAO,SAAS,UAAU,IAAI;AACnD,SAAO;AACT;;;ADDO,IAAM,aAAa,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA2B;AACzB,MAAI;AAAc,WAAO,EAAE,OAAO,qBAAqB;AACvD,MAAI,CAAC;AAAO,WAAO,EAAE,OAAO,oBAAoB;AAChD,MAAI,CAAC;AAAU,WAAO,EAAE,OAAO,uBAAuB;AACtD,MAAI,CAAC;AAAiB,WAAO,EAAE,OAAO,8BAA8B;AAEpE,QAAM,KAAa,WAAW;AAE9B,MAAI,aAAa;AAAiB,WAAO,EAAE,OAAO,yBAAyB;AAE3E,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,UAAU,KAAK,QAAQ;AAAA,EACzB;AACF;","names":[]}